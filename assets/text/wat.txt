#] WTF is wrong with coding?
No, I'm serious. Some shit really does not make sense.
*#Note:# I was inspired to make this page by +[this]<https://www.destroyallsoftware.com/talks/wat> page.*
#Note:# These code blocks are typed by hand. The interpreter on your machine will most likely look \
different than what is shown. Additionally, terminal based interpreters do not have syntax highlighting. \
I added that here so people who don't code have an idea of what is what kinda.

#] JavaScript.
Let's talk about JavaScript.
Some background is necessary.
`[]` is an array, a list.
`{}` is an object, could be literally anything.
`NaN` is "Not a number"
###] Equals
So, lets talk about this: `==`. This makes no sense. In every single language,
it means "is it equal?", but in JS, this is calculated as a percentage for some reason.
```js
// JavaScript
>>> 1 == "1"
true
```
So, how do you get the operator that most langauges use? Well, add another `=` to the end!
```js
// JavaScript
>>> 1 === "1"
false
```
So, that means the more equal signs I add, the more I can check how equal two values are, right?
```js
// JavaScript
>>> 1 ==== "1"
SyntaxError
```
Of course not.
Strings are not integers, and should not be treated as such. This is silly.

###] Lists
In all languages, you can make two lists by appending the contents of one list to another using the `+` operator.
```py
# Python
>>> [1, 2, 3] + [4, 5, 6]
[1, 2, 3, 4, 5, 6]
>>> [] + []
[]
```
Makes sense, right? Add one list to another to make a larger list, like we do in real life. Let's see what happens in JS.
```js
// JavaScript
>>> [] + []
""
```
OF COURSE FUCKING NOT. *Let's be different.* Subtracting, however, shouldn't work. What would you remove, where? \
JavaScript has a solution.
```js
// JavaScript
>>> [] - []
0
```

###] Objects
This should be quite simple. Let's see what happens when we add an object and a list together. \
They are completely incompatible data types, so it should throw a TypeError or something like that.
```js
// JavaScript
>>> [] + {}
"[object Object]"
```
Well, if that works, then let's try reversing it because that's how addition works afterall. \
And of course, we get the same thing.
```js
// JavaScript
>>> {} + []
0
>>> {} - []
-0
```
Makes sense to me. I love negative zero. Let's try adding two objects.
```js
// JavaScript
>>> {} + {}
NaN
```
Not a number. I see.

###] Strings
A string is text. Like "hi". Most languages do not automatically convert datatypes without explicit instruction. \
JavaScript is one of those exceptions. So, adding will concatonate, or append to the end of the string.
```js
// JavaScript
>>> 12 + "34"
"1234"
```
So, let's try subtracting. Shouldn't work because strings aren't numbers, right?
```js
// JavaScript
>>> 12 - "34"
-22
```
Well of course I was wrong. When did JS ever make sense?

#] Python
Python is a very sane language, relatively speaking to JavaScript of course. Python accepts inputs directly from the console. \
Let's input a number.
```py
# Python
>>> int(input("Input a number ] ")) # Convert to an integer [no decimals]
Input a number ] <b><u>2.5</u></b>
ValueError
```
Nice, I cannot input a decimal and expect it to come out as an integer. JavaScript, the insane language as described previously, \
allows this just fine, probably because strings are also numbers too.

#] Ruby
Let's talk about Ruby. Note: I do not have syntax highlighting for ruby yet, I will get to it soon.

###] Assigning variables
If a variable is not defined, it should throw an error. 
```rb
# Ruby
>>> a
NameError
>>> b
NameError
```
Great, all works as expected. Let's try assigning a variable with an unknown variable. This shouldn't work either.
```rb
# Ruby
>>> a = b
NameError
```
Nice, but now let's try assigning an undefined variable to itself.
```rb
# Ruby
>>> a = a
nil
```
Um, `a` is `nil` now I guess.

###] Funky types.
`nil` is `null`, or literally nothing. Absolutely no data is stored. Therefore, `nil` should always be `nil`.
```rb
# Ruby
>>> nil
nil
```
I have no idea what it means, but lets add a question mark
```
# Ruby
>>> nil?
false
```
